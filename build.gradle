buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    // MapStruct
    id 'net.ltgt.apt' version '0.19'
}

// Java Project
apply plugin: 'java'

// Spock Framework
apply plugin: 'groovy'

// Spring Boot Project
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

// IDEs compatibility
apply plugin: 'idea'
apply plugin: 'net.ltgt.apt-idea'
apply plugin: 'eclipse'
apply plugin: 'net.ltgt.apt-eclipse'


group = 'com.kiesoft'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += sourceSets.main.output + configurations.testRuntime
            runtimeClasspath += output + compileClasspath
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestCompile.extendsFrom testCompile
}

dependencies {
    // Spring
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-security")

    // Databases
    implementation("org.postgresql:postgresql:${postgresqlVersion}")
    implementation("org.hibernate:hibernate-hikaricp:${hikaricpVersion}")

    // JWT
    implementation("com.nimbusds:nimbus-jose-jwt:${nimbusJoseVersion}")

    // Tools
    implementation("org.apache.commons:commons-lang3:${commonsLangVersion}")
    implementation("commons-codec:commons-codec:${commonsCodecVersion}")
    implementation("commons-validator:commons-validator:${commonsValidatorVersion}")

    // Mapper
    implementation("org.mapstruct:mapstruct:${mapstructVersion}")
    annotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")

    // XSS
    implementation("com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:${owaspSanitizerVersion}")

    // Testing
    testAnnotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")

    // Unit Test
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.codehaus.groovy:groovy-all:${groovyVersion}")
    testImplementation("org.spockframework:spock-core:${spockCoreVersion}")

    // Integration Test
    integrationTestImplementation("org.springframework.boot:spring-boot-starter-test")
    integrationTestImplementation("org.codehaus.groovy:groovy-all:${groovyVersion}")
    integrationTestImplementation("org.spockframework:spock-core:${spockCoreVersion}")
    integrationTestImplementation("org.spockframework:spock-spring:${spockSpringVersion}")
    integrationTestImplementation("com.h2database:h2:${h2DatabaseVersion}")
}

task integrationTest(type: Test) {
    description = 'Runs integration tests'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test